<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dragon_SZ</title>
  
  <subtitle>相离莫相忘,且行且珍惜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://longlongblog.cn/"/>
  <updated>2017-11-01T09:54:11.000Z</updated>
  <id>http://longlongblog.cn/</id>
  
  <author>
    <name>Dragon_SZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis Cluster FlushAll失败</title>
    <link href="http://longlongblog.cn/2017/11/01/58/"/>
    <id>http://longlongblog.cn/2017/11/01/58/</id>
    <published>2017-11-01T09:12:40.000Z</published>
    <updated>2017-11-01T09:54:11.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h4><p>Flush是一个极少用到的操作，不过既然碰到过诡异的现象，也记录在此。</p><p>问题场景是在Reids Cluster中使用主从模式，向主节点发送flush命令，预期主从节点都会清空数据库。但是诡异的现象出现了，我们得到的结果是主从节点发生了切换，并且数据并没有被清空。</p><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>分析以上case，Redis采用单线程模型，flush操作执行的时候会阻塞所有其它操作，包括集群间心跳包。当Redis中有大量数据的时候，flush操作会消耗较长时间。所以该节点较长时间不能跟集群通信，当达到一定阈值的时候，集群会判定该节点为fail，并且会切换主从状态。</p><p>Redis采用异步的方式进行主从同步，flush操作在主节点执行完成之后，才会将命令同步到从节点。此时老的从节点变为了主节点，它不会再接受来自老的主节点的删除数据的操作。</p><p>当老的主节点flush完成的时候，它恢复与集群中其它节点的通讯，得知自己被变成了从节点，所又会把数据同步过来。最终造成了主从节点发生了切换，并且数据没有被清空的现象。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>解决方式：临时调大集群中所有节点的cluster-node-timeout参数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h4&gt;&lt;p&gt;Flush是一个极少用到的操作，不过既然碰到过诡异的现象，也记录在此。&lt;/p&gt;
&lt;p&gt;问题场景是在Reids Cluster
      
    
    </summary>
    
      <category term="Redis" scheme="http://longlongblog.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://longlongblog.cn/tags/Redis/"/>
    
      <category term="Cluster" scheme="http://longlongblog.cn/tags/Cluster/"/>
    
  </entry>
  
  <entry>
    <title>企业级Redis环境部署</title>
    <link href="http://longlongblog.cn/2016/05/31/57/"/>
    <id>http://longlongblog.cn/2016/05/31/57/</id>
    <published>2016-05-31T03:12:40.000Z</published>
    <updated>2016-06-03T06:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>哨兵配置文件参考：</p><p>   哨兵配置文件: etc/redis/sentinel.conf</p>  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">sentinel monitor test1 <span class="number">10.10</span><span class="number">.10</span><span class="number">.152</span> <span class="number">6386</span> <span class="number">1</span></div><div class="line">sentinel down-after-milliseconds test1 <span class="number">5000</span></div><div class="line">sentinel failover-timeout test1 <span class="number">900000</span></div><div class="line">sentinel can-failover test1 yes</div><div class="line">sentinel parallel-syncs test1 <span class="number">2</span></div><div class="line"></div><div class="line">sentinel config-epoch test1 <span class="number">45</span></div><div class="line">sentinel leader-epoch test1 <span class="number">45</span></div><div class="line">sentinel known-slave test1 <span class="number">10.10</span><span class="number">.10</span><span class="number">.155</span> <span class="number">6387</span></div><div class="line"></div><div class="line">port <span class="number">26379</span></div><div class="line">dir <span class="string">"/usr/local/etc"</span></div><div class="line">sentinel current-epoch <span class="number">45</span></div></pre></td></tr></table></figure></li><li><p>备注： </p>  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis哨兵<span class="number">10.10</span><span class="number">.10</span><span class="number">.155</span>， 哨兵端口（<span class="number">26379</span>）</div><div class="line">test1 <span class="number">10.10</span><span class="number">.10</span><span class="number">.152</span> <span class="number">6386</span>  为其中一个监控的redis 主服务端口</div></pre></td></tr></table></figure></li><li><p>前提：</p>  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">哨兵：<span class="number">10.10</span><span class="number">.10</span><span class="number">.155</span></div><div class="line">redis端口 <span class="number">10.10</span><span class="number">.10</span><span class="number">.155</span> <span class="number">26379</span> 实例启动 为哨兵服务</div><div class="line">命令：redis-server /usr/local/etc/sentinel.conf --sentinel</div><div class="line">本机：<span class="number">10.10</span><span class="number">.10</span><span class="number">.152</span></div><div class="line">redis端口 <span class="number">10.10</span><span class="number">.10</span><span class="number">.152</span> <span class="number">6386</span> 实例启动 为主master服务</div><div class="line">命令：sudo redis-server /etc/redis/redis_master_6386.conf</div><div class="line">其他机：<span class="number">10.10</span><span class="number">.10</span><span class="number">.155</span></div><div class="line">redis端口 <span class="number">10.10</span><span class="number">.10</span><span class="number">.155</span> <span class="number">6387</span> 实例启动 为从slave服务</div><div class="line">命令：sudo redis-server /etc/redis/redis_slave_6387.conf</div></pre></td></tr></table></figure></li><li><p>操作：</p>  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在<span class="number">10.10</span><span class="number">.10</span><span class="number">.155</span>机器上命令：</div><div class="line">redis-cli -h  <span class="number">10.10</span><span class="number">.10</span><span class="number">.155</span> -p <span class="number">6387</span> 进入redis</div><div class="line">slaveof <span class="number">10.10</span><span class="number">.10</span><span class="number">.152</span> <span class="number">6386</span>  这样本机（<span class="number">10.10</span><span class="number">.10</span><span class="number">.155</span>）作为主（<span class="number">10.10</span><span class="number">.10</span><span class="number">.152</span> 端口 <span class="number">6386</span>）的从数据库了</div></pre></td></tr></table></figure></li><li><p>测试要点：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">修改 <span class="number">27</span>行 script_redis_monitor<span class="selector-class">.php</span> 文件 修改哨兵$_sentinels监控的IP和端口，修改为<span class="number">10.10</span>.<span class="number">10.155</span> <span class="number">26379</span>。</div><div class="line">修改 <span class="number">141</span>行 script_redis_monitor<span class="selector-class">.php</span> 文件 修改<span class="variable">$address</span>  为自己的邮件地址。</div><div class="line">停掉哨兵服务 redis-server /usr/local/etc/sentinel<span class="selector-class">.conf</span> --sentinel 这个进程停掉，运行 php script_redis_monitor<span class="selector-class">.php</span> 看邮件报警。&lt;<span class="selector-tag">span</span> style=<span class="string">"color:red"</span>&gt;记得重新启动&lt;/span&gt;。</div><div class="line">停掉master服务sudo redis-server  /etc/redis/redis_master_6386<span class="selector-class">.conf</span> 这个进程停掉， &lt;<span class="selector-tag">span</span> style=<span class="string">"color:red"</span>&gt;<span class="number">3</span>秒内&lt;/span&gt; 运行 php script_redis_monitor<span class="selector-class">.php</span> 看邮件报警。&lt;<span class="selector-tag">span</span> style=<span class="string">"color:red"</span>&gt;记得重新启动&lt;/span&gt;。</div><div class="line">停掉master服务sudo redis-server  /etc/redis/redis_master_6386<span class="selector-class">.conf</span> 这个进程停掉， &lt;<span class="selector-tag">span</span> style=<span class="string">"color:red"</span>&gt;同时&lt;/span&gt; 停掉slave服务sudo redis-server  /etc/redis/redis_slave_6387<span class="selector-class">.conf</span> 这个进程停掉，运行php script_redis_monitor<span class="selector-class">.php</span> 看邮件报警。</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;哨兵配置文件参考：&lt;/p&gt;
&lt;p&gt;   哨兵配置文件: etc/redis/sentinel.conf&lt;/p&gt;
  &lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div 
      
    
    </summary>
    
      <category term="SQL" scheme="http://longlongblog.cn/categories/SQL/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>监控系统工具对比</title>
    <link href="http://longlongblog.cn/2016/05/30/56/"/>
    <id>http://longlongblog.cn/2016/05/30/56/</id>
    <published>2016-05-30T03:12:40.000Z</published>
    <updated>2016-06-28T12:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h2><h3 id="flume"><a href="#flume" class="headerlink" title="flume"></a>flume</h3><p>端口监控时 java cpu 负载 在10%～13%左右</p><p><img src="/img/flume1.png" alt="&quot;/img/flume1.png&quot;"></p><h3 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h3><p>端口监控时 java cpu 负载 在8%～10%左右</p><p><img src="/img/logstash1.png" alt="&quot;/img/logstash1.png&quot;"><br>    <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">相比较而言，在<span class="meta">cpu</span>负载方面，logstash更佳。</div></pre></td></tr></table></figure></p><h2 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h2><h3 id="flume-1"><a href="#flume-1" class="headerlink" title="flume"></a>flume</h3><p>请求shenzhenlong.newvip.youku.com页面，nginx生成的access.log 的log日志，请求10000次，耗费时间为1768.1288728714s，平均每请求一次耗时 0.1768s</p><p><img src="/img/flume10000.png" alt="&quot;/img/flume10000.png&quot;"></p><h3 id="logstash-1"><a href="#logstash-1" class="headerlink" title="logstash"></a>logstash</h3><p>请求shenzhenlong.newvip.youku.com页面，nginx生成的access.log 的log日志，请求10000次，耗费时间为1637.932365179s，平均每请求一次耗时 0.1637s</p><p><img src="/img/logstash10000.png" alt="&quot;/img/flume10000.png&quot;"><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">相比较而言，在请求延时方面，logstash更佳。</div></pre></td></tr></table></figure></p><h2 id="测试三"><a href="#测试三" class="headerlink" title="测试三"></a>测试三</h2><h3 id="flume-2"><a href="#flume-2" class="headerlink" title="flume"></a>flume</h3><p>利用rpc方式 直接写入flume ，请求10000次，发送时间为8.922s</p><p>发送时间：8.922s</p><p><img src="/img/flume_rpc.png" alt="&quot;/img/flume_rpc.png&quot;"></p><p>收集时间：55.007 - 45.471 = 9.536s</p><p><img src="/img/flume_rpc1.png" alt="&quot;/img/flume_rpc1.png&quot;"><br>    <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpc方式直接写入flume 效率是 <span class="number">9.536</span> - <span class="number">8.922</span> = <span class="number">0.614</span>s 说明响应时间为 每收集到<span class="number">10000</span>条数据，发送到flume的agent 用时为<span class="number">0.614</span>s</div></pre></td></tr></table></figure></p><h3 id="flume-3"><a href="#flume-3" class="headerlink" title="flume"></a>flume</h3><p>利用写log方式 直接写入硬盘，然后flume收集 ，请求10000次，发送时间为1.006s</p><p>发送时间：1.006s</p><p><img src="/img/flume10001.png" alt="&quot;/img/flume10001.png&quot;"></p><p>收集时间：57.172 - 53.001 = 4.171s</p><p><img src="/img/flume10002.png" alt="&quot;/img/flume10002.png&quot;"><br>    <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">利用写log方式 然后flume收集  效率是 <span class="number">4.171</span> - <span class="number">1.006</span> = <span class="number">3.165</span>s 说明响应时间为 每收集到<span class="number">10000</span>条数据，flume的agent 收集到数据 用时为 <span class="number">3.165</span>s</div></pre></td></tr></table></figure></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>两种不同的log收集机制，利用rpc 直接调用写入flume的agent 延时小，效率高，每10000次日志生成，能比直接写入硬盘log 效率快5～6s 时间。</li><li>目前php调用实现rpc的方式需要进一步实现，暂时用java语言测试三，查看效率。</li><li>建议采用rpc方式直接写入agent方式，做demo出来，与现有logstash的收集方式做性能，负载，效率 等对比。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;测试一&quot;&gt;&lt;a href=&quot;#测试一&quot; class=&quot;headerlink&quot; title=&quot;测试一&quot;&gt;&lt;/a&gt;测试一&lt;/h2&gt;&lt;h3 id=&quot;flume&quot;&gt;&lt;a href=&quot;#flume&quot; class=&quot;headerlink&quot; title=&quot;flume&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Other" scheme="http://longlongblog.cn/categories/Other/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PHP类的自动加载</title>
    <link href="http://longlongblog.cn/2016/01/04/4/"/>
    <id>http://longlongblog.cn/2016/01/04/4/</id>
    <published>2016-01-04T14:02:24.000Z</published>
    <updated>2016-06-28T12:34:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h3><ul><li>require()和include()语句是语言结构，不是真正的函数。</li><li>require()和include()语句也可以不加圆括号而直接加参数。</li><li>require_once() 判断并加载文件。</li><li>include_once() 判断并加载文件。   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">相同点：在脚本执行期间包括运行指定文件</div><div class="line"></div><div class="line">不同点： <span class="number">1.</span>incluce在用到时加载，require在一开始就加载</div><div class="line"><span class="number">2.</span>include_once()和require_once()文件中的代码已经被包括了，则不会再次包括，</div><div class="line">以避免函数重定义以及变量重新赋值等问题。</div><div class="line"><span class="number">3.</span>include引入文件的时候，如果碰到错误，会给出提示，并继续运行下边的代码。</div><div class="line"><span class="number">4.</span>require引入文件的时候，如果碰到错误，会给出提示，并停止运行下边的代码。</div><div class="line">问题：   <span class="number">1.</span>多个文件中，类的命名重复问题。</div><div class="line"><span class="number">2.</span> 一个文件中加载多个类文件。</div></pre></td></tr></table></figure></li></ul><h3 id="类的懒加载"><a href="#类的懒加载" class="headerlink" title="类的懒加载"></a>类的懒加载</h3><ul><li>__autoload : 根据类名，找出类文件，然后require _once()</li><li><p>spl _autoload : spl _autoload _register注册多个自定义的autoload函数</p></li><li><p>__autoload : 定义路径法（path）和直接映射法（array）</p></li><li><p>spl _autoload : autoload调用堆栈，注册多个自定义的autoload函数</p><pre><code>缺陷： __autoload的最大缺陷是无法有多个autoload方法 </code></pre></li></ul><h3 id="MVC加载原理"><a href="#MVC加载原理" class="headerlink" title="MVC加载原理"></a>MVC加载原理</h3><p><img src="/img/flow.png" alt="/img/flow.png"></p><ol><li><p>include 配置</p> <figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">'include'</span> =&gt; <span class="built_in">array</span>( <span class="symbol">'application</span>/catalog/controllers',</div><div class="line"><span class="symbol">'application</span>/catalog/models', ),</div><div class="line">$<span class="keyword">include</span> =&gt; <span class="built_in">array</span>(<span class="symbol">'application</span>/controllers', <span class="symbol">'application</span>/models', <span class="symbol">'application</span>/library'); </div><div class="line">set_include_path(get_include_path<span class="literal">()</span> . <span class="type">PATH_SEPARATOR</span> .implode(<span class="type">PATH_SEPARATOR</span>, $config[<span class="symbol">'include'</span>]));</div></pre></td></tr></table></figure></li><li><p>autoload 方式</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($class)</span> </span></div><div class="line"><span class="function"></span>&#123; </div><div class="line">$path = <span class="string">''</span>; </div><div class="line">$path = str_replace(<span class="string">'_'</span>, <span class="string">'/'</span>, $class) . <span class="string">'.php'</span>; </div><div class="line"><span class="keyword">include_once</span>($path); </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* sql自动加载 </span></div><div class="line"><span class="comment">*/</span> </div><div class="line">spl_autoload_register(<span class="keyword">array</span>(<span class="string">'Loader'</span>, <span class="string">'autoload'</span>));</div></pre></td></tr></table></figure></li><li><p>路由实例化并唤醒类方法</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">route</span><span class="params">()</span> </span></div><div class="line"><span class="function"></span>&#123; </div><div class="line"><span class="keyword">if</span> (class_exists(<span class="keyword">$this</span>-&gt;getController())) &#123; </div><div class="line">$rc = <span class="keyword">new</span> ReflectionClass(<span class="keyword">$this</span>-&gt;getController()); </div><div class="line"><span class="keyword">if</span> ($rc-&gt;hasMethod(<span class="keyword">$this</span>-&gt;getAction())) &#123; </div><div class="line">$controller = $rc-&gt;newInstance(); </div><div class="line">$method = $rc-&gt;getMethod(<span class="keyword">$this</span>-&gt;getAction()); </div><div class="line">$method-&gt;invoke($controller); </div><div class="line">&#125; <span class="keyword">else</span> </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'no action'</span>); </div><div class="line">&#125; <span class="keyword">else</span> </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'no controller'</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="Composer加载原理"><a href="#Composer加载原理" class="headerlink" title="Composer加载原理"></a>Composer加载原理</h3><ul><li><p>__autoload 只能全局下加载，但在命名空间下无法实现</p></li><li><p>composer（包管理器）的应用</p></li></ul><p><img src="/img/composer.png" alt="/img/composer.png"></p><ol><li><p>psr-0</p> <figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"autoload"</span>: &#123;</div><div class="line"> <span class="string">"psr-0"</span>: &#123;</div><div class="line"> <span class="string">"Foo\\"</span>: <span class="string">"src/"</span>,</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">路径生成： <span class="string">"Foo\\Bar\\Baz.php"</span></div></pre></td></tr></table></figure></li><li><p>psr-4</p> <figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"autoload"</span>: &#123;</div><div class="line"> <span class="string">"psr-4"</span>: &#123;</div><div class="line"> <span class="string">"Foo\\"</span>: <span class="string">"src/"</span>,</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">路径生成： <span class="string">"src/Foo/Bar/Baz.php"</span></div></pre></td></tr></table></figure></li><li><p>class-map</p> <figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"autoload"</span>: &#123;</div><div class="line"><span class="string">"classmap"</span>: [<span class="string">"src/"</span>, <span class="string">"lib/"</span>, <span class="string">"Something.php"</span>]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">路径生成： <span class="string">"src/Something.php"</span></div></pre></td></tr></table></figure></li><li><p>files</p> <figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"autoload"</span>: &#123;</div><div class="line"><span class="string">"files"</span>: [<span class="string">"src/MyLibrary/functions.php"</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">生成一个<span class="keyword">array</span></div></pre></td></tr></table></figure></li></ol><ul><li>加载原理</li></ul><p><img src="/img/autoload.png" alt="/img/autoload.png"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>composer加载第三方库的演示</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol><li><a href="&quot;http://www.cnblogs.com/xia520pi/p/3697099.html&quot;">http://www.cnblogs.com/xia520pi/p/3697099.html</a></li><li><a href="&quot;http://www.jb51.net/article/31399.htm&quot;">http://www.jb51.net/article/31399.htm</a></li><li><a href="&quot;http://www.jb51.net/article/53876.htm&quot;">http://www.jb51.net/article/53876.htm</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类的加载&quot;&gt;&lt;a href=&quot;#类的加载&quot; class=&quot;headerlink&quot; title=&quot;类的加载&quot;&gt;&lt;/a&gt;类的加载&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;require()和include()语句是语言结构，不是真正的函数。&lt;/li&gt;
&lt;li&gt;require()和i
      
    
    </summary>
    
      <category term="PHP" scheme="http://longlongblog.cn/categories/PHP/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>不知从何说起</title>
    <link href="http://longlongblog.cn/2015/06/30/5/"/>
    <id>http://longlongblog.cn/2015/06/30/5/</id>
    <published>2015-06-30T15:28:04.000Z</published>
    <updated>2016-05-30T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>擦了又写，写了又擦，不知从何说起，该写点什么，让自己忙碌的心，静下来好好想想，自己想要什么样的生活。让一直忙碌的心，静下来时，却又不知所措，心里就是莫名的失落，总感觉生活缺少了什么。朋友最近听李宗盛的歌，引起了共鸣，也许到了这年纪，就会伤感多了一些，看到有些东西，无能为力，就要学会试着去接受。<br>今天晚上突然想写点什么，可是脑中一片空白。世界这么大，可是又那么小。今天听同学说起面试的一哥们，说是我们专业的毕业生，可是谁知道他面前的面试官，就是这个大学，这个专业的精英人才，弄得面试官一头雾水，不知所措，是自己的记忆的缺失，还是面试者的谎言，经过一番的确认后，对不起哥们，你撞墙上了，世界这么大，为什么偏偏是你？时下计算机行业，吹嘘，自捧成为一种潮流，不管你能力有多大，只要你在简历中吹捧，在面试中吹嘘，就能有一个看起来比较体面的工资，现在这个形式就这样了，让很大一部分程序员，飞起来了，迷失了自我，把太多的经历放在了忽悠上，而忽略了最根本的东西。<br>昨天公司来了一位学弟，之前在大学实验室中学习的，带着一起做项目的，当问及他的薪水时，我要哭了，刚从大学出来的薪水，比我这工作一年的薪水还高不少，计算机行业的倒挂现象很是明显，顿时让我无地自容。反观一下，我这一年到底做了什么，我又留下了什么，得到了什么，深深地陷入到迷茫之中。<br>现在想想真是有些后悔当初的选择，为了一门语言，放弃了技术的学习，况且语言也没有学好，将自己毕业时最重要的一年，压在了语言的学习，到头来该忘得都忘了，该记住的也都忘了，将自己的青春一年白白的浪费掉。现在想想人生职业规划真的很重要，必须要明白自己想要什么，想得到什么，不能在最需要奋斗的年纪选择了安逸。<br>爱情也好，事业也罢，都应该明确自己的规划，都不能违背自己的初衷，一步一个脚印，稳稳的走下去，我相信总会有美好的未来，我始终坚信，目标总会实现。就像今晚的月亮，虽然遥不可及，但是那皎洁的月光，总会吸引着你，不断的前进。加油吧，骚年。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;擦了又写，写了又擦，不知从何说起，该写点什么，让自己忙碌的心，静下来好好想想，自己想要什么样的生活。让一直忙碌的心，静下来时，却又不知所措，心里就是莫名的失落，总感觉生活缺少了什么。朋友最近听李宗盛的歌，引起了共鸣，也许到了这年纪，就会伤感多了一些，看到有些东西，无能为力，
      
    
    </summary>
    
      <category term="Note" scheme="http://longlongblog.cn/categories/Note/"/>
    
    
      <category term="生活" scheme="http://longlongblog.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>一意孤行</title>
    <link href="http://longlongblog.cn/2015/06/26/8/"/>
    <id>http://longlongblog.cn/2015/06/26/8/</id>
    <published>2015-06-25T17:12:40.000Z</published>
    <updated>2016-05-30T05:36:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>一意孤行，就得付出代价，疼了，就会回头。突然的一个念头从自己的脑门中闪过，这完全不是凭空的造句，而是有感而发。我都不知道自己现在做的什么，都是自己太仓促，都是自己还没有考虑清楚，也怪自己不考虑后果，只看到眼前的一切，没有一点点的进步，有人说想的太多，有时就是负担太重，有时就是考虑周全，但是这也是犹豫不决的根本所在，怕这怕那，没有那一点点果敢。可是我就是那样的人，总想着把事情做好，总想着做的完美一些，不想以为考虑不周全而让事情是失败的。<br>在经历了一年的自我思考之后，我真的是放下了，感觉放下了对两个人都好，追一个人，没有回应是什么感觉；追一个人，得到是那些勉强的回应是什么感觉，追一个人，最后告诉你对你没有感觉是什么感觉，你知道么，我知道，我亲身体验过。其实当我后来问过她时，她说我追过她么？我一下就愣住了，我顿时明白了，我们的观念是截然不同的。也知道自己没怎么追过，我也不知道什么是追她，什么不是追她，怎么样才算追她，这让我一下对自己的情商产生了巨大的怀疑，对我自己的产生了巨大怀疑，甚至我都不敢再去追一个人，怎么追，脑中一片空白。平时可以嘻嘻哈哈，可是一到感情问题，就不知如何是好，怎样把握好这个度，怎样才能顺其自然。<br>不知道怎么写了，思路断了，等我想想继续。。。四天后的今天晚上，我又收拾了一下思绪继续细说一下自己的一意孤行。事情的起因完全是一个不经意的晚上的一句对白，让我彻底了改变了自己的想法。一句我对你有意思，彻底了撕开了我一年未动的心扉，让我内心有一丝颤动，第一次有女生会这样表达自己的想法，我也是非常的感动，内心也是默默的想着不能辜负人家的一丝情谊。虽说是大学四年的同学，但是大学的四年时光两个人各自忙着自己的情感，各自经营着自己的未来，从未有过一丝的幻想。事情的转折由此而来，接下来的4个月，在我心里你就是目标，就是唯一的，不知为何，我对你的笑容无法抗拒，有一点点的撒娇更是无法承受，自己的防线就会瞬间打破。你问我喜欢不喜欢你，我现在说可能喜欢，因为我见到你我会很高兴，很放松；在一起我会很快乐，就这么简单，当初我做了一个必须自己承担后果的决定，就是慢慢喜欢上你，慢慢地去关心你，不想让你再受一点点的委屈，因为我知道你的过去，了解你的经历，所以我不想再一次让你受到一点点的伤害。有时候你会感觉到我会很小心眼，不是那么大度，看不开一点世事，也许是因为我在乎你，在乎你的得失，不敢想象忽然你离开了，会是什么的想象。你一直想知道为什么那么多人都不赞同，我去追求你。我问过你们宿舍的人，问过我的兄弟们，问过跟你接触的人，尤其是我们的同学，他们除了小姜持支持态度外，都不赞同我追你，正因为他们彼此了解你我，大学里对我们都有一定的定位的，不赞同我们在一起的，也是有一定原因的。有的人说的是你的过去，我不在乎你的过去，我都了解，谁还没有过不堪回首的曾经呢；有的说你的人生价值观念，我们的价值观有些不同，他们都知道我想找的女朋友是同甘共苦，一起打拼的，这个你也知道，虽然这很难找，但是我相信两个人共同拼出来的家才是家，两个人共同编织的未来才是未来，这样的家才会长久下去，这样的未来才有实现的可能；有的人说现实存在，我们两个家庭情况比较悬殊，我家里完全靠我自己打拼，父母供着我们四个上完大学已是精疲力尽，烙下了满身的伤病。而我作为家庭的长子，到了他们老了，一定要陪伴的他们身边，对于父母的问题上，我弟可以任性，但是我不能，所以我的打算就是定居在济南，离家近一点，也有时间经常回家看看父母。而你就不同了，一个女儿家，父母都在天津有着稳定的家，哥哥也在天津，而你也在天津上学，当然在天津找个人家嫁了，离着父母也近，工作也会更好找，一家人团聚也是很好的，跟我回到济南，你愿意么？就算你愿意我也不忍心，因为我都害怕我给不了你在天津那样的生活条件，给不了你在天津一样的生活状态。这是一个很现实的问题，一个不得不面对的问题，我记得我们说过这个问题，但是我们都是大人了，不是小孩了，不得不去考虑这些问题。有的人说年龄的问题，你比我大两岁，其实我就喜欢比我大的，以为我总感觉小的不那么成熟，你上完研究生，找了工作基本上就得结婚了，而我照现在的状态，三年后还不知道能不能给你一个能结婚的家，能不能让你过上安稳的生活。有的人说你的前任，无论是从生活条件，还是家庭背景我都没法比，我只能靠我自己来经营，而我自始至终最担心的也是比较，当然比较是肯定的，无论从各方面我都比不过他的，我除了老是安稳一点，哈哈，没有大的抱负，没有出国深造的梦想，我想的就是努力挣钱，经营好一个家。有的人说你还是挺现实的，这个我也看的出来，现实没什么不好的，所谓生活么，就是现实一点；女人为什么现实，社会就是这样，女人之所以现实就是因为还没有找到让她不现实的男人。奥对了小姜的支持，当然是这么好的姑娘，早不下手，等到人家上了研究生，有的是优秀合适的男生，那个时候就没机会了，哈哈，说的也是挺有道理的。而我为什么偏偏选择了一意孤行呢，本来打算亲口跟你说来，我怕没这个机会了，也许就是我的不争气，一点点的就被感动了，憧憬着未来，也许是你的笑容，让我无法抗拒，看到你的笑脸我会很快乐，很高兴。我没有把他们的劝告抛之脑后，我在一点点的确认你的举动是否是我想的那样，是否是能跟我一起同甘共苦的，是否是真心要在一起的，是否是能天长地久的，我想这些确认了，我就是再苦再累也不能让你在我这再受那一点点的委屈，我听到你哭过，看到过你的眼花，我最抗不了的就是女人的眼泪，一哭就心软了。其实我也是抱着试试的态度去尝试，试着去喜欢你，试着给你温暖（还嫌我热），但是也怪我操之过急了。<br>那天晚上当你告诉我你觉得很别扭时，我预想到了结局，因为你的内心还没有转变过来，也许从来就没想着转变过来，我知道你还没有从上一次的阴影中完全走出来，上一次给你的打击非常大，也不敢轻易的去尝试，轻易的去接受别人，因为你怕受伤，你怕伤害了别人，那样痛苦的伤害不想再一次的发生在自己身上。我记得你找下一位男朋友肯定是要结婚的，这也许不是太绝对，但表明了你的态度，你的选择，我也是看中了你这一点。自始至终，你没有骗过我，我相信你，我自始至终（除了从此不吸烟之外哈）在感情和大是大非的问题上我也没有骗过你。那晚在车站你看到了我的不开心，因为我也许预想到了结局，害怕的事终于要发生了，因为我也害怕再一次的失败，让我再一次没有信心，我这人就是不会掩盖，都表现在脸上了。我知道你现在对自己没有信心能不能接受一段新的感情，感情的问题勉强不来，两个人相互喜欢，相互吸引，相互相爱才是真谛，我也是最害怕的就是那种万里呼喊没回声的感觉，我经历过，失落过，不想让这再发生在我的身上，那样对两个人都不好，与其牵强的牵手，还不如坦然的放手。你问过我，如果拒绝了还能不能做朋友，我当时回答了不可能，看到你也是有些失落，我想说的是也许可以，不过要给我一点时间，我要转变一下，当然不会像以前那样没心没肺的，我做不到，我相信你也会顾忌，都怪我唐突的去牵手，都怪我不成熟的恋爱方法，最终导致了这样尴尬的局面，我会承担这些后果的。当然在一些事上，只要你跟我说，我能帮着做的当然竭尽全力去做的。你反问的为什么郑梅梅可以，我想回答你的是，现在关系是最普通不过的朋友，有时候想起来发个消息寒暄的问候一下，寒暄的结束，没有心动的感觉，没有心在跳动，没有掏心窝的谈心，和以前完全不同，以为不一样了，真的是不一样了，我做不到，她也会去刻意回避一些事情。从一个经常谈心，相互了解对方的关系，慢慢走到了寒暄的问候，也许这就是最好的结局。</p><p>你一定要考虑清楚了，我不着急的，都怪我太鲁莽了，我还是想说的看你想要什么样的生活，我能给你什么样的生活，不要顾及别人，想好自己想要的，考虑好自己以后的未来。想清楚了，就大胆的说出来，对两个人都好，不要有任何的顾及，我看好你奥。什么样的结果我都能接受，毕竟陷入的还不是太深，影响也不是很大。我更倾向于在研究生学习中会遇到更好的，更合适的，志同道合，特别合拍，特别聊得来的那种，能够在天津定居的，离着父母也近，工作也好找，生活也挺惬意的，女生就得找个安稳的，平平淡淡走过一生，就是最幸福的。</p><p>以上是我内心的真实想法，很感谢你能耐心看完我这中长篇小说，哈哈，人生的路还很长，还有很多路等着我们去走，旅途中小小的插曲，匆匆的过客，也是丰富多彩人生的一部分，一起加油吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一意孤行，就得付出代价，疼了，就会回头。突然的一个念头从自己的脑门中闪过，这完全不是凭空的造句，而是有感而发。我都不知道自己现在做的什么，都是自己太仓促，都是自己还没有考虑清楚，也怪自己不考虑后果，只看到眼前的一切，没有一点点的进步，有人说想的太多，有时就是负担太重，有时就
      
    
    </summary>
    
      <category term="Note" scheme="http://longlongblog.cn/categories/Note/"/>
    
    
      <category term="生活" scheme="http://longlongblog.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>定时自动启动任务crontab命令用法</title>
    <link href="http://longlongblog.cn/2015/05/07/20/"/>
    <id>http://longlongblog.cn/2015/05/07/20/</id>
    <published>2015-05-07T07:32:20.000Z</published>
    <updated>2016-05-31T05:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>每个操作系统都有它的自动定时启动程序的功能，Windows有它的任务计划，而Linux对应的功能是crontab。<br>crontab简介<br>crontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中，以供之后读取和执行。该词来源于希腊语 chronos(χρόνος)，原意是时间。　　通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。<br>crontab用法<br>crontab的格式如下面：<br>f1 f2 f3 f4 f5 program<br>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行程式的路径。<br>当 f1 为 <em> 时表示每分钟都要执行 program，f2 为 </em> 时表示每小时都要执行程式，其余类推<br>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其余类推<br>当 f1 为 <em>/n 时表示每 n 分钟个时间间隔执行一次，f2 为 </em>/n 表示每 n 小时个时间间隔执行一次，其余类推<br>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其余类推<br>管理员登录SSH,输入命令crontab -e编辑crontab文件，根据上面的格式输入并保存。<br>crontab例子<br>每月每天每小时的第 0 分钟执行一次 /bin/ls :<br>    <figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span>* * * * /bin/ls</div></pre></td></tr></table></figure></p><p>在 12 月内, 每天的早上 6 点到 12 点中，每隔 20 分钟执行一次 /usr/bin/backup :<br>    <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*/<span class="number">20</span> <span class="number">6</span><span class="number">-12</span> * <span class="number">12</span> * /usr/bin/backup</div></pre></td></tr></table></figure></p><p>周一到周五每天下午 5:00 寄一封信给 alex@domain.name :<br>    <figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">17</span> * * <span class="number">1</span>-<span class="number">5</span> mail -s <span class="string">"hi"</span> alex@domain.<span class="keyword">name</span> &lt; /tmp/maildata</div></pre></td></tr></table></figure></p><p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”<br>    <figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">20 </span><span class="number">0</span>-<span class="number">23</span>/<span class="number">2</span> * * * echo <span class="string">"haha"</span></div></pre></td></tr></table></figure></p><p>晚上11点到早上8点之间每两个小时，早上8点<br>    <figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">23</span>-<span class="number">7</span>/<span class="number">2</span>，<span class="number">8</span> * * * date</div></pre></td></tr></table></figure></p><p>在hp unix,中，每20分钟执行一次，表示为：0,20,40 <em> </em> <em> </em> 而不能采用*/n方式，否则出现语法错误<br>crontab用法其实很容易掌握，懂得使用crontab，对网站和服务器维护起到很大的帮助，比如定时备份，定时优化服务器等。</p><p>转载来源:<a href="https://www.centos.bz/2011/03/auto-run-task-crontab/" target="_blank">https://www.centos.bz/2011/03/auto-run-task-crontab/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每个操作系统都有它的自动定时启动程序的功能，Windows有它的任务计划，而Linux对应的功能是crontab。&lt;br&gt;crontab简介&lt;br&gt;crontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存
      
    
    </summary>
    
      <category term="Linux" scheme="http://longlongblog.cn/categories/Linux/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PHP的魔术方法</title>
    <link href="http://longlongblog.cn/2015/05/06/49/"/>
    <id>http://longlongblog.cn/2015/05/06/49/</id>
    <published>2015-05-06T06:15:06.000Z</published>
    <updated>2016-05-31T06:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>PHP中的魔术方法总结 :<strong>construct, </strong>destruct , <strong>call, </strong>callStatic,<strong>get, </strong>set, <strong>isset, </strong>unset , <strong>sleep, </strong>wakeup, <strong>toString, </strong>set_state, <strong>clone and </strong>autoload</p><p>1、<strong>get、</strong>set</p><p>这两个方法是为在类和他们的父类中没有声明的属性而设计的<br><strong>get( $property ) 当调用一个未定义的属性时访问此方法</strong>set( $property, $value ) 给一个未定义的属性赋值时调用<br>这里的没有声明包括当使用对象调用时，访问控制为proteced,private的属性（即没有权限访问的属性）</p><p>2、<strong>isset、</strong>unset</p><p><strong>isset( $property ) 当在一个未定义的属性上调用isset()函数时调用此方法</strong>unset( $property ) 当在一个未定义的属性上调用unset()函数时调用此方法<br>与<strong>get方法和</strong>set方法相同，这里的没有声明包括当使用对象调用时，访问控制为proteced,private的属性（即没有权限访问的属性）</p><p>3、<strong>call</strong>call( $method, $arg_array ) 当调用一个未定义的方法是调用此访求<br>这里的未定义的方法包括没有权限访问的方法</p><p>4、<strong>autoload</strong>autoload 函数，它会在试图使用尚未被定义的类时自动调用。通过调用此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。<br>注意: 在 __autoload 函数中抛出的异常不能被 catch 语句块捕获并导致致命错误。</p><p>5、<strong>construct、</strong>destruct<br><strong>construct 构造方法，当一个对象创建时调用此方法，使用此方法的好处是：可以使构造方法有一个独一无二的名称,无论它所在的类的名称是什么.这样你在改变类的名称时,就不需要改变构造方法的名称</strong>destruct 析构方法，PHP将在对象被销毁前（即从内存中清除前）调用这个方法<br>默认情况下,PHP仅仅释放对象属性所占用的内存并销毁对象相关的资源.<br>析构函数允许你在使用一个对象之后执行任意代码来清除内存.<br>当PHP决定你的脚本不再与对象相关时,析构函数将被调用.<br>在一个函数的命名空间内,这会发生在函数return的时候.<br>对于全局变量,这发生于脚本结束的时候.如果你想明确地销毁一个对象,你可以给指向该对象的变量分配任何其它值.通常将变量赋值勤为NULL或者调用unset.</p><p>6、<strong>clone<br>PHP5中的对象赋值是使用的引用赋值，如果想复制一个对象则需要使用clone方法，在调用此方法是对象会自动调用</strong>clone魔术方法<br>如果在对象复制需要执行某些初始化操作，可以在__clone方法实现</p><p>7、<strong>toString </strong>toString方法在将一个对象转化成字符串时自动调用，比如使用echo打印对象时<br>如果类没有实现此方法，则无法通过echo打印对象，否则会显示：Catchable fatal error: Object of class test could not be converted to string in<br>此方法必须返回一个字符串<br>在PHP 5.2.0之前，<strong>toString方法只有结合使用echo() 或 print()时 才能生效。PHP 5.2.0之后，则可以在任何字符串环境生效（例如通过printf()，使用%s修饰符），但 不能用于非字符串环境（如使用%d修饰符）。从PHP 5.2.0，如果将一个未定义</strong>toString方法的对象 转换为字符串，会报出一个E_RECOVERABLE_ERROR错误。</p><p>8、<strong>sleep、</strong>wakeup<br><strong>sleep 串行化的时候用</strong>wakeup 反串行化的时候调用<br>serialize() 检查类中是否有魔术名称 <strong>sleep 的函数。如果这样，该函数将在任何序列化之前运行。它可以清除对象并应该返回一个包含有该对象中应被序列化的所有变量名的数组。<br>使用 </strong>sleep 的目的是关闭对象可能具有的任何数据库连接，提交等待中的数据或进行类似的清除任务。此外，如果有非常大的对象而并不需要完全储存下来时此函数也很有用。<br>相反地，unserialize() 检查具有魔术名称 <strong>wakeup 的函数的存在。如果存在，此函数可以重建对象可能具有的任何资源。<br>使用 </strong>wakeup 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务。</p><p>9、__set_state<br>当调用var_export()时，这个静态 方法会被调用（自PHP 5.1.0起有效）。<br>本方法的唯一参数是一个数组，其中包含按array(’property’ =&gt; value, …)格式排列的类属性。</p><p>10、<strong>invoke<br>当尝试以调用函数的方式调用一个对象时，</strong>invoke 方法会被自动调用。<br>PHP5.3.0以上版本有效</p><p>11、<strong>callStatic<br>它的工作方式类似于 </strong>call() 魔术方法，<strong>callStatic() 是为了处理静态方法调用，<br>PHP5.3.0以上版本有效<br>PHP 确实加强了对 </strong>callStatic() 方法的定义；它必须是公共的，并且必须被声明为静态的。同样，__call() 魔术方法必须被定义为公共的，所有其他魔术方法都必须如此。</p><p>原文出处：<a href="http://www.cnblogs.com/xiaochaohuashengmi/archive/2011/09/22/2185034.html" title="http://www.cnblogs.com/xiaochaohuashengmi/archive/2011/09/22/2185034.html" target="_blank" rel="external">http://www.cnblogs.com/xiaochaohuashengmi/archive/2011/09/22/2185034.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PHP中的魔术方法总结 :&lt;strong&gt;construct, &lt;/strong&gt;destruct , &lt;strong&gt;call, &lt;/strong&gt;callStatic,&lt;strong&gt;get, &lt;/strong&gt;set, &lt;strong&gt;isset, &lt;/strong&gt;
      
    
    </summary>
    
      <category term="PHP" scheme="http://longlongblog.cn/categories/PHP/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>问题 :You can&#39;t specify target table &#39;A&#39; for update in FROM clause</title>
    <link href="http://longlongblog.cn/2015/04/29/42/"/>
    <id>http://longlongblog.cn/2015/04/29/42/</id>
    <published>2015-04-29T08:30:29.000Z</published>
    <updated>2016-05-31T05:56:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在处理一个表的数据时，想直接把某个人对应的数据，对应到另一个人上去，思想很简单，就是把第一个人的对应的ID查出来，然后再用更新语句将所有ID在这里边的做一个更新操作，思路很清晰，操作很简单。好的，代码写好了直接操作数据库，<br>    <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> house h <span class="keyword">SET</span> h.Fuser_id = <span class="number">79063</span> <span class="keyword">WHERE</span> h.Fid <span class="keyword">IN</span> (<span class="keyword">SELECT</span> Fid <span class="keyword">from</span> house <span class="keyword">WHERE</span> Fuser_id = <span class="number">79056</span> <span class="keyword">AND</span> Fdistrict1 = <span class="string">''</span> <span class="keyword">AND</span> Fis_process = <span class="number">0</span>);</div></pre></td></tr></table></figure></p><p>但是在具体操作的过程中，问题出现了，问题是You can’t specify target table ‘A’ for update in FROM clause,问题出在哪了，一查资料原因是在更新这个表和数据时又查询了它，而查询的数据又做了更新的条件。<br>解决方案呢就是先将查出的表作为一个第三方表，然后查询第三方表实现隔离操作。<br>    <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> house h <span class="keyword">SET</span> h.Fuser_id = <span class="number">79063</span> <span class="keyword">WHERE</span> h.Fid <span class="keyword">IN</span> (<span class="keyword">SELECT</span> temp.Fid <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> Fid <span class="keyword">from</span> house <span class="keyword">WHERE</span> Fuser_id = <span class="number">79056</span> <span class="keyword">AND</span> Fdistrict1 = <span class="string">''</span> <span class="keyword">AND</span> Fis_process = <span class="number">0</span>) temp );</div></pre></td></tr></table></figure></p><p>当然这种做法是最佳的选择，还有一个笨方法就是建立一个temp临时表，插入临时表，然后查询临时表，当然该方法的优点是在遇到数据量大的情况下，可以避免数据库内存不够用而导致的宕机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在处理一个表的数据时，想直接把某个人对应的数据，对应到另一个人上去，思想很简单，就是把第一个人的对应的ID查出来，然后再用更新语句将所有ID在这里边的做一个更新操作，思路很清晰，操作很简单。好的，代码写好了直接操作数据库，&lt;br&gt;    &lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="SQL" scheme="http://longlongblog.cn/categories/SQL/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈PHP大数据处理</title>
    <link href="http://longlongblog.cn/2015/04/27/30/"/>
    <id>http://longlongblog.cn/2015/04/27/30/</id>
    <published>2015-04-27T10:44:57.000Z</published>
    <updated>2016-05-31T05:54:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>新换的公司，一个表中的数据竟然有29G之大，我顿时就懵了，更让我惊讶的是，还与另一个1G多的表做关联查询，真是让我摸不着头脑，尤其这是mysql数据库，也是惊出了我一身冷汗，好在还有优化的解决方案，下面简单谈一下我的解决方案。</p><ol><li>尽量不要用inner join，内连接查询速度慢，建议为left jion。</li><li>建立索引，两个表中关联的字段都要加上key，可以为主键索引，唯一索引，普通索引等。</li><li>limit 分段处理，每次取2000条，处理完之后再取数据处理。</li><li>mysql数据库优化，将InnoDB的类型改为MyISAM,MyISAM数据引擎更适合大数据的搜索查询。</li><li>优化数据库，使用存储过程式查询，存储过程优势是查询一次后再次查询会很快。</li><li>利用Explain获取的信息来实现mysql优化，参考地址：<a href="http://www.cnblogs.com/promise-7/archive/2012/05/25/2517356.html" title="http://www.cnblogs.com/promise-7/archive/2012/05/25/2517356.html" target="_blank" rel="external">http://www.cnblogs.com/promise-7/archive/2012/05/25/2517356.html</a></li></ol><p>其实归根结底是数据库方面的优化，当然数据量很大的情况下，要提前预知好，更换数据库是避免查询宕机的关键，如果提前预知用oracle数据库的话，就不会出现现在的情况，现在改数据库，花费的代价很大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新换的公司，一个表中的数据竟然有29G之大，我顿时就懵了，更让我惊讶的是，还与另一个1G多的表做关联查询，真是让我摸不着头脑，尤其这是mysql数据库，也是惊出了我一身冷汗，好在还有优化的解决方案，下面简单谈一下我的解决方案。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尽量不要用inner
      
    
    </summary>
    
      <category term="PHP" scheme="http://longlongblog.cn/categories/PHP/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Redis与Memcache的异同点</title>
    <link href="http://longlongblog.cn/2015/04/23/31/"/>
    <id>http://longlongblog.cn/2015/04/23/31/</id>
    <published>2015-04-23T04:33:31.000Z</published>
    <updated>2016-05-31T05:55:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间参加PHP的面试，几乎每个公司都会涉及到Nosql的问题，当前Nosql以高效存储，高效查询等优势迅速成为数据库的辅助工具，最为应用广泛的是Redis，Memcache，Mongodb等，其中Redis与Memcache是key-value型的数据存储，MongoDB是json格式的存储，以下浅谈以下redis与memcache的异同点。<br>1、 Redis和Memcache都是将数据存放在内存中，都是内存数据库。不过memcache还可用于缓存其他东西，例如图片、视频等等。<br>2、 数据类型–Memcache在添加数据时就要指定数据的字节长度，例如：<br>    <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set key3 <span class="number">0</span> <span class="number">0</span> <span class="number">8</span></div><div class="line">lxsymcto</div><div class="line">STORED</div></pre></td></tr></table></figure></p><p>而redis不需要，如：<br>    <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">redis</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;<span class="selector-tag">set</span> <span class="selector-tag">key2</span> "<span class="selector-tag">lxsymblog</span>"</div><div class="line"><span class="selector-tag">OK</span></div><div class="line"><span class="selector-tag">redis</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;<span class="selector-tag">get</span> <span class="selector-tag">key2</span></div><div class="line">"<span class="selector-tag">lxsymblog</span>"</div></pre></td></tr></table></figure></p><p>3、虚拟内存–Redis当物理内存用完时，可以将一些很久没用到的value 交换到磁盘,而memcache不会。<br>4、过期策略–memcache在set时就指定，例如set key1 0 0 8,即永不过期。<br>   Redis可以通过例如expire 设定，例如expire name 10<br>5、分布式–设定memcache集群，利用magent做一主多从;redis可以做一主多从。都可以一主一从。<br>6、存储数据安全–memcache挂掉后，数据没了；redis可以定期保存到磁盘（持久化）。<br>7、灾难恢复–memcache挂掉后，数据不可恢复; redis数据丢失后可以通过aof恢复。</p><p>以上是对该两种数据库的分析，但是不论怎样都有优缺点，根据项目需求具体确定用哪种类型数据库才是最关键的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间参加PHP的面试，几乎每个公司都会涉及到Nosql的问题，当前Nosql以高效存储，高效查询等优势迅速成为数据库的辅助工具，最为应用广泛的是Redis，Memcache，Mongodb等，其中Redis与Memcache是key-value型的数据存储，MongoD
      
    
    </summary>
    
      <category term="SQL" scheme="http://longlongblog.cn/categories/SQL/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>mongodb数据导入导出以及备份恢复</title>
    <link href="http://longlongblog.cn/2015/02/03/46/"/>
    <id>http://longlongblog.cn/2015/02/03/46/</id>
    <published>2015-02-03T13:19:48.000Z</published>
    <updated>2016-05-31T05:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<div style="font-size:14px;"><br>一、数据导出 mongoexport<br><br>假设库里有一张user 表，里面有2 条记录，我们要将它导出<br>    <figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; use my_mongodb</div><div class="line">switched <span class="keyword">to</span> db my_mongodb</div><div class="line">&gt; db.user.<span class="builtin-name">find</span>();</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"4f81a4a1779282ca68fd8a5a"</span>), <span class="string">"uid"</span> : 2, <span class="string">"username"</span> : <span class="string">"Jerry"</span>, <span class="string">"age"</span> : 100 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"4f844d1847d25a9ce5f120c4"</span>), <span class="string">"uid"</span> : 1, <span class="string">"username"</span> : <span class="string">"Tom"</span>, <span class="string">"age"</span> : 25 &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure><br><br>1 常用导出方法<br>    <figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# ./mongoexport -d my_mongodb -c<span class="built_in"> user </span>-o user.dat</div><div class="line">connected <span class="keyword">to</span>: 127.0.0.1</div><div class="line">exported 2 records</div><div class="line">[root@localhost bin]# cat user.dat</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"<span class="variable">$oid</span>"</span> : <span class="string">"4f81a4a1779282ca68fd8a5a"</span> &#125;, <span class="string">"uid"</span> : 2, <span class="string">"username"</span> : <span class="string">"Jerry"</span>, <span class="string">"age"</span> : 100 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : &#123; <span class="string">"<span class="variable">$oid</span>"</span> : <span class="string">"4f844d1847d25a9ce5f120c4"</span> &#125;, <span class="string">"uid"</span> : 1, <span class="string">"username"</span> : <span class="string">"Tom"</span>, <span class="string">"age"</span> : 25 &#125;</div><div class="line">[root@localhost bin]#</div></pre></td></tr></table></figure><br><br>参数说明:<br> -d 指明使用的库, 本例中为” my_mongodb”<br> -c 指明要导出的表, 本例中为”user”<br> -o 指明要导出的文件名, 本例中为”user.dat”<br>从上面可以看到导出的方式使用的是JSON 的样式<br>2 导出CSV格式的文件<br>    <figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# ./mongoexport -d my_mongodb -c<span class="built_in"> user </span>--csv -f uid,username,age -o</div><div class="line">user_csv.dat</div><div class="line">connected <span class="keyword">to</span>: 127.0.0.1</div><div class="line">exported 2 records</div><div class="line">[root@localhost bin]# cat user_csv.dat</div><div class="line">uid,username,age</div><div class="line">2,<span class="string">"Jerry"</span>,100</div><div class="line">1,<span class="string">"Tom"</span>,25</div><div class="line">[root@localhost bin]#</div></pre></td></tr></table></figure><br><br>参数说明:<br> -csv 指要要导出为csv 格式<br> -f 指明需要导出哪些例<br>更详细的用法可以 mongoexport –help 来查看<br><br>二、数据导入mongoimport<br><br>在上例中我们讨论的是导出工具的使用，那么本节将讨论如何向表中导入数据<br>1 导入JSON 数据<br>我们先将表user 删除掉，以便演示效果<br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.user.drop();</span></div><div class="line">true</div><div class="line"><span class="meta">&gt;</span><span class="bash"> show collections;</span></div><div class="line">system.indexes</div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure><br><br>然后导入数据<br>    <figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# ./mongoimport -d my_mongodb -c<span class="built_in"> user </span>user.dat</div><div class="line">connected <span class="keyword">to</span>: 127.0.0.1</div><div class="line">imported 2 objects</div><div class="line">[root@localhost bin]#</div></pre></td></tr></table></figure><br><br>可以看到导入数据的时候会隐式创建表结构<br><br>2 导入CSV数据<br>我们先将表user 删除掉，以便演示效果<br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.user.drop();</span></div><div class="line">true</div><div class="line"><span class="meta">&gt;</span><span class="bash"> show collections;</span></div><div class="line">system.indexes</div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure><br><br>然后导入数据<br>    <figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# ./mongoimport -d my_mongodb -c<span class="built_in"> user </span>--type csv --headerline --file</div><div class="line">user_csv.dat</div><div class="line">connected <span class="keyword">to</span>: 127.0.0.1</div><div class="line">imported 3 objects</div><div class="line">[root@localhost bin]#</div></pre></td></tr></table></figure><br><br>参数说明:<br> -type 指明要导入的文件格式<br> -headerline 批明不导入第一行，因为第一行是列名<br> -file 指明要导入的文件路径<br>注意:<br>CSV 格式良好，主流数据库都支持导出为CSV 的格式，所以这种格式非常利于异构数据迁移<br><br>三、数据备份mongodump<br><br>可以用mongodump 来做MongoDB 的库或表级别的备份，下面举例说明:<br>备份my_mongodb 数据库<br>    <figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@localhost</span> bin]<span class="meta"># ./mongodump -d my_mongodb</span></div><div class="line">connected <span class="keyword">to</span>: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">DATABASE: my_mongodb <span class="keyword">to</span> dump/my_mongodb</div><div class="line">my_mongodb.system.indexes <span class="keyword">to</span> dump/my_mongodb/system.indexes.bson</div><div class="line"><span class="number">1</span> objects</div><div class="line">my_mongodb.user <span class="keyword">to</span> dump/my_mongodb/user.bson</div><div class="line"><span class="number">2</span> objects</div><div class="line">[root<span class="symbol">@localhost</span> bin]<span class="meta"># ll</span></div></pre></td></tr></table></figure><br><br>总计 67648<br>    <figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-rwxr-xr-x<span class="number"> 1 </span>root root<span class="number"> 7508756 </span>2011-04-06 bsondump</div><div class="line">drwxr-xr-x<span class="number"> 3 </span>root root<span class="number"> 4096 </span>04-10 23:54 dump</div><div class="line">-rwxr-xr-x<span class="number"> 1 </span>root root<span class="number"> 2978016 </span>2011-04-06 mongo</div></pre></td></tr></table></figure><br><br>此时会在当前目录下创建一个dump 目录，用于存放备份出来的文件<br>也可以指定备份存放的目录，<br>    <figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@localhost</span> bin]<span class="meta"># ./mongodump -d my_mongodb -o my_mongodb_dump</span></div><div class="line">connected <span class="keyword">to</span>: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">DATABASE: my_mongodb <span class="keyword">to</span> my_mongodb_dump/my_mongodb</div><div class="line">my_mongodb.system.indexes <span class="keyword">to</span></div><div class="line">my_mongodb_dump/my_mongodb/system.indexes.bson</div><div class="line"><span class="number">1</span> objects</div><div class="line">my_mongodb.user <span class="keyword">to</span> my_mongodb_dump/my_mongodb/user.bson</div><div class="line"><span class="number">2</span> objects</div><div class="line">[root<span class="symbol">@localhost</span> bin]<span class="meta">#</span></div></pre></td></tr></table></figure><br><br>这个例子中将备份的文件存在了当前目录下的my_mongodb_dump 目录下<br><br>数据恢复mongorestore<br><br>由于刚刚已经做了备份，所以我们先将库my_mongodb 删除掉<br>    <figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; use my_mongodb</div><div class="line">switched to db my_mongodb</div><div class="line">&gt; db.dropDatabase()</div><div class="line">&#123; "dropped" : "my_mongodb", "ok" : 1 &#125;</div><div class="line">&gt; show dbs</div><div class="line">admin (empty)</div><div class="line">local (empty)</div><div class="line"><span class="keyword">test </span>(empty)</div><div class="line">&gt;</div></pre></td></tr></table></figure><br><br>接下来我们进行数据库恢复<br>    <figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]<span class="comment"># ./mongorestore -d my_mongodb my_mongodb_dump/*</span></div><div class="line">connected to: 127.0.0.1</div><div class="line">Wed Apr<span class="number"> 11 </span>00:03:03 my_mongodb_dump/my_mongodb/user.bson</div><div class="line">Wed Apr<span class="number"> 11 </span>00:03:03 going into namespace [my_mongodb.user]</div><div class="line">Wed Apr<span class="number"> 11 </span>00:03:03<span class="number"> 2 </span>objects found</div><div class="line">Wed Apr<span class="number"> 11 </span>00:03:03 my_mongodb_dump/my_mongodb/system.indexes.bson</div><div class="line">Wed Apr<span class="number"> 11 </span>00:03:03 going into namespace [my_mongodb.system.indexes]</div><div class="line">Wed Apr<span class="number"> 11 </span>00:03:03 &#123; name: "_id_", ns: "my_mongodb.user", key: &#123; _id:<span class="number"> 1 </span>&#125;, v:<span class="number"> 0 </span>&#125;</div><div class="line">Wed Apr<span class="number"> 11 </span>00:03:03<span class="number"> 1 </span>objects found</div><div class="line">[root@localhost bin]<span class="comment">#</span></div></pre></td></tr></table></figure><br><br>经验证数据库又回来了，其实要是想恢复库，也大可不必先删除my_mongodb 库，只要指<br>明 –drop 参数，就可以在恢复的时候先删除表然后再向表中插入数据<br>本文出处：<a href="http://blog.csdn.net/liuzhoulong/article/details/6849978" title="http://blog.csdn.net/liuzhoulong/article/details/6849978" target="_blank" rel="external">http://blog.csdn.net/liuzhoulong/article/details/6849978</a></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;font-size:14px;&quot;&gt;&lt;br&gt;一、数据导出 mongoexport&lt;br&gt;&lt;br&gt;假设库里有一张user 表，里面有2 条记录，我们要将它导出&lt;br&gt;    &lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="SQL" scheme="http://longlongblog.cn/categories/SQL/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2014 该有个总结</title>
    <link href="http://longlongblog.cn/2015/01/04/3/"/>
    <id>http://longlongblog.cn/2015/01/04/3/</id>
    <published>2015-01-04T14:02:24.000Z</published>
    <updated>2016-05-30T05:40:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><div style="font-size: 14px;"><span style="padding-left: 30px;">在写这个文章时，我特意看了一下文章《<a href="http://longlongblog.sinaapp.com/?p=411" title="2013 该有个总结" target="_blank" rel="external">2013 ，该有个总结</a>》，自己认真地读完了，内心莫名的一颤，不知为何，就是突如其来的伤感涌上心头，是感叹时间过的飞快，还是叹息这一年自己的所作所为呢，不得而知。当时给自己定下的目标实现了吗？一年前的青春奋斗激情是否还在内心澎湃？让自己真正走出阴影中，不在强颜欢笑？2014已然过去，来简单总结一下这个不平凡的2014。</span></div></p><p><div style="font-size: 14px;"><span style="padding-left: 30px;">学生时代的结束，无疑是最大的亮点。毕竟作为学生也是有15年的时间了，想一想这么多年的学生生涯是怎么过来的呢。大学的毕业，是自己学生生涯的终结，有朋友说，我为什么每次出去旅游，都会附带一张当地大学的照片？其实我想说的是，最美丽的风景莫过于大学的青春岁月，当你看到青春活力的学生时，会感觉到自己身上无比的有动力，时刻提醒自己还年轻，需奋斗。我为什么不考研究生？其实我就是在逃避，不想再去埋头的学习。当然家庭的原因的客观现实存在，促使我下定决心不再深造。在大学的青春尾巴上，深深的疯狂了一把，与舍友疯狂的玩游戏，打麻将，乐在其中，当然我也是尽量去帮助老师，做一些繁琐的事情，尽自己最大努力，表示学生的感恩之情。离别的情景是那样的历历在目，这就是感情的流露，现实的存在。坚持到毕业的最后一天，踏上了远离校园的旅途，校园，学生时代在地平线的一头，渐渐淡去了它的光影。</span></div></p><p><div style="font-size: 14px;"><span style="padding-left: 30px;">感情归宿的寻找，定是不可遗漏的话题。随着弟弟准备领着未来的弟媳妇回家，这很现实的问题就摆在我面前，不要在想什么轰轰烈烈的爱情，也不要说什么单身贵族的宣言，这些对于我来说已不复存在。其实我不善于感情的流露，不会表达内心的真实想法。不是拼命的对一个人好，那个人就会对你好，那样的感情是不平衡的，迟早一天会失去平衡。有朋友说，你的现在是过去的堆积，过去的点点滴滴，确实是能体现一个人的为人与情感，也许这也是太熟悉的人之间的考量。其实我的要求很简单，一个能一起过日子的女人，彼此包容彼此的过去，彼此相信彼此的未来，善良孝顺就足以。我不会刻意知道你的过去，我只要你的将来和我一心一意，相爱到白头就这么简单。2015 就奔着这样的目标前去，不管现在如何，我始终相信我和你会在一个不经意的路口相遇，相知，相爱，白头到永远。</span></div></p><p><div style="font-size: 14px;"><span style="padding-left: 30px;">工作事业的发展，必是今后的重中之重。初入社会的我，没有走到人生的十字路口，没有太多的抉择。选择日立，为了学好一门语言，但是你也会在其他方面失去一些东西，这个就看自己的心态，自己怎样的一个衡量。有得有失这是自然规律的存在，心态的把握才是重点。人生的路还很长，有时不要只顾到眼前的利益，整个年轻时的规划才是重点。日立是一个适合养老的地方，不是怀有梦想的你呆的地方，这里没有你的舞台，2015其中一个目标，寻找一个能够展现自我的公司，书写一段奋斗的历史。生活中的私活，结识的是朋友，尽心尽力去做好每一个活，这是人与人之间最起码的信任。</span></div></p><p><div style="font-size: 14px;"><span style="padding-left: 30px;">多彩生活的计划，才是丰富人生的浓墨一笔。去一些你想去的地方，也许你就会发现未知的自己，也许会给自己的抉择找一些借口，有时就是需要需要一个借口，来说服自己去承认。身体和心灵总要有一个在路上，不要让自己的青春颓废下去。美丽的风景，衬托的是心境，让人内心无比的宽敞，那就是另一个自己。别人的生活，你无法干预；自己的生活，你全权处理。</span></div></p><p><div style="font-size: 14px;"><span style="padding-left: 30px;">2015的来临，也将预示着本命年的到来，为何不在众人的危言中，奋斗一下，努力一把，难道就是相信命运的安排吗？事在人为，所有的偶遇也是人的刻意安排。自己更加现实一些，更加努力一些，相信会更好~</span></div></p><embed src="http://longlongblog-wordpress.stor.sinaapp.com/uploads/2013/12/愿得一人心（电视剧《最美的时光》主题曲）-李行亮.mp3" hidden="true" autostart="true" loop="true"><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;padding-left: 30px;&quot;&gt;在写这个文章时，我特意看了一下文章《&lt;a href=&quot;http://longlongblog.sinaapp.com/?p=411&quot; title=
      
    
    </summary>
    
      <category term="Note" scheme="http://longlongblog.cn/categories/Note/"/>
    
    
      <category term="生活" scheme="http://longlongblog.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="感悟" scheme="http://longlongblog.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>解决PHP上传文件大小限制</title>
    <link href="http://longlongblog.cn/2014/12/18/38/"/>
    <id>http://longlongblog.cn/2014/12/18/38/</id>
    <published>2014-12-18T14:52:03.000Z</published>
    <updated>2016-06-01T05:56:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，php的上传文件大小都是在php.ini中配置好的，但是有时我们要上传比较大的文件，默认是不可以的，不能达到我们的需求，故修改配置文件如下：</p><p>配置php.ini文件 （以上传500M以下大小的文件为例）<br>查找以下选项并修改：</p><ol><li><p>file_uploads = On ;打开文件上传选项。</p></li><li><p>upload_max_filesize = 500M ;上传文件上限。<br>如果要上传比较大的文件，仅仅以上两条还不够，必须把服务器缓存上限调大，把脚本最大执行时间变长 </p></li><li><p>post_max_size = 500M ;post上限 </p></li><li><p>max_execution_time = 1800 ; 脚本最大执行时间 </p></li><li><p>max_input_time = 1800 ;  输入最大执行时间 </p></li><li><p>memory_limit = 128M ; 内存上限</p></li></ol><p>记得配置完了后要重启apache等服务器服务，即可成功！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般情况下，php的上传文件大小都是在php.ini中配置好的，但是有时我们要上传比较大的文件，默认是不可以的，不能达到我们的需求，故修改配置文件如下：&lt;/p&gt;
&lt;p&gt;配置php.ini文件 （以上传500M以下大小的文件为例）&lt;br&gt;查找以下选项并修改：&lt;/p&gt;
&lt;ol&gt;
      
    
    </summary>
    
      <category term="PHP" scheme="http://longlongblog.cn/categories/PHP/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Webservice与Servlet的区别</title>
    <link href="http://longlongblog.cn/2014/12/13/55/"/>
    <id>http://longlongblog.cn/2014/12/13/55/</id>
    <published>2014-12-13T02:17:11.000Z</published>
    <updated>2016-05-31T06:05:10.000Z</updated>
    
    <content type="html"><![CDATA[<div style="font-size: 14px;">Servlet是Java对于Web开发而产生的一项技术，可以说Servlet技术是Java专有的，它是服务器端的技术，客户端通常是浏览器，<br>  而WebService是在DCOM   CORBA等分布式技术之后发展起来的。WebService有一个国际通用的标准SOAP。具体规范发布在<a href="http://www.w3.org/TR/SOAP/" title="http://www.w3.org/TR/SOAP/" target="_blank" rel="external">http://www.w3.org/TR/SOAP/</a><br><br>  SOAP是为了在Internet   环境下，实现系统是松散耦合的、跨平台的，与语言无关的，与特定接口无关的，而且要提供对Web   应用程序的可靠访问。<br><br>  几乎所有的开发工具都可以开发WebService系统，包括Java,C#,甚至基于VCL架构的Delphi。而且   所开发出来的WebService系统，可以方便的被各种客户端调用，包括，浏览器，W32应用程序，还有Java   App。<br><br>  可以这么说，开发一个WebService系统，把它放到互联网上，生成一个WebService描述文件.wsdl（非常容易）,全世界的任何人，使用几乎任何开发工具，引用了这个wsdl,就像引用了一个动态库的头文件一样，方便的调用你的WebService接口，就像调用本地的方法一样。<br><br>综上所述:<br>    <figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、<span class="built_in">WebService</span>通常是基于http的远程方法调用(RMI)，号称是可以反回远程对象，    一般来说客户段可以象调用本地方法一样调用<span class="built_in">WebService</span>的方法。   </div><div class="line"><span class="number">2</span>、<span class="built_in">WebService</span>使用的SOAP是一种通用的格式，不管什么样的客户端都可以。  </div><div class="line"><span class="number">3</span>、如果你用Servlet返回XML，那个XML的描述框架就是你定的喽？你能确保别人都能看明白你的XML格式含义？  </div><div class="line"><span class="number">4</span>、<span class="built_in">WebService</span>并不复杂，开发起来甚至比Servlet还简单。  </div><div class="line"><span class="number">5</span>、如果客户段需要传递一个复杂的多维数组给服务端，Servlet怎么办？  </div><div class="line"><span class="number">6</span>。<span class="built_in">webservice</span>的优点在于可以传递对象（其实是结构化的数据），从而对异构系统来说更有优势 </div><div class="line">其实最重点要的，是<span class="built_in">WebService</span>的方法返回消息是有标准的（大家通用，谁都能看懂），如果用Servlet所返回XML，是没有标准的</div></pre></td></tr></table></figure><br><br>在我们的项目中，一个java web项目要使用另一个java web的方法，这时可以选择servlet和webservice方法，我们使用servlet方法，使用httpclient访问，地址为<a href="http://ip/servlet/servletname" target="_blank" rel="external">http://ip/servlet/servletname</a> 访问成功。<br>关于如何返回数据，out对象输出即可<br><br>servlet到是也可以传对象 只要能序列化<br><br>其实 servlet和webservice不是一个层次上的东西 不可比<br>servlet定义的是一套interface<br>目的是实现 java在web上的动态访问（不知局限于http协议的 至少还有ftp协议）<br><br>webservice定义的是一套标准（SOAP/UDDI/WSDL… 比API更抽象）,与语言无关 协议无关 平台无关<br>目的是实现基于service的组件（相对于EJB DCOM ….）<br>从webservice的目的不难看出 他的复杂度还是相当大的 （EJB需要考虑的他都要进行实现） 包括安全性 事务性 等等…. 远不止上面列出的SOAP/UDDI/WSDL</div><address>转载出处：<a href="http://xuyuanshuaaa.iteye.com/blog/1134677" title="http://xuyuanshuaaa.iteye.com/blog/1134677" target="_blank" rel="external">http://xuyuanshuaaa.iteye.com/blog/1134677</a></address>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;font-size: 14px;&quot;&gt;Servlet是Java对于Web开发而产生的一项技术，可以说Servlet技术是Java专有的，它是服务器端的技术，客户端通常是浏览器，&lt;br&gt;  而WebService是在DCOM   CORBA等分布式技术之后发展
      
    
    </summary>
    
      <category term="Java" scheme="http://longlongblog.cn/categories/Java/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>好基友，一辈子</title>
    <link href="http://longlongblog.cn/2014/11/22/18/"/>
    <id>http://longlongblog.cn/2014/11/22/18/</id>
    <published>2014-11-22T14:13:15.000Z</published>
    <updated>2016-05-30T05:44:18.000Z</updated>
    
    <content type="html"><![CDATA[<div style="font-size: 14px;"><span style="padding-left: 30px;">想了很长时间，就是想不出这个标题来，就叫这个吧。跟好基友说好的，一定专门为你写个传记，正好今天有时间了，也想写点东西了，就给你写个类似传记的东西。我的好基友，一个我大学里很认真交的朋友；一个让我记忆尤深的基友，一辈子不曾忘记的兄弟。</span></div><br><div style="font-size: 14px;"><span style="padding-left: 30px;">为什么回成为我的好基友？为什么会让我如此记忆尤深？这得从我的大学生活开始。那年秋天，我认认真真地开始了我的大学生活，大一的我忙于各种班级，学生会事务，学习也是没放在心上，我顶住来自老师不信任的巨大压力下，每天都是独自回到宿舍，每每回到宿舍，还得忙着学生会的事务，那时的我也就是和同宿舍的舍友最熟了还有就是他了，他就是孙冉，一个比我小一岁的，比我胖，比我高的小伙，那时我看他就是我要交朋友的类型，就是老实，没有任何的心眼，这就是他交朋友的标准，恰好这也是我交朋友的标准，臭味相投。记得大二那年，我经历的发展的寒冬，从忙碌中闲暇下来，一下子不知道干什么，学习也是不知所措。是他在背后支持我，每天早上去叫我起床，一起去十餐吃早餐，然后一起去挤公交车。每天下午放学后，一起走回到学校，细声笑语，尽在其中。这让不知所措的我找到了不一样的大学生活，那时我才会学会思考剩余三年的生活。一年如一日，转眼就是大三了，我们分到了同一个宿舍，每天晚上睡觉前都是扯淡，互相损，犹豫时一起光着膀子站在阳台上抽着烟，大谈阔论。一起调戏着小姑娘（都是他），这样的生活很充实。最关键的是每天早上会有人给带温馨的早餐，吃着相同的早餐，然后一起去上课，美好的一天就这样开始了。大四了，我离开了学校，去扬州了，而他也是准备了考研，我不知道他的考研状态，反正没把被子拿到教室，学够了就不学了，到点就不舒服，就走了，这样的考研状态。。。哈哈，我回到了学校，跟他们一起来学习，督促着他学习，但是我失败了。他有时就像一个小孩，考虑的不周全，依赖性较强，性格还是比较急的。我又一次离开了学校来到了青岛，他那时还在学校考研，我记得当时考试前一天晚上打电话，听到他说的，很是轻松的感觉，我也是有点放心的，因为我大体知道他复习到什么程度。学成归来，参加毕业设计答辩，那时我们每天几乎是轮着买午餐和晚餐（早餐忽略了），一起吃着大锅菜，尤其是我忙一天后，回到宿舍已经有人给买好饭了。（声明一下:我的性取向是女的，当然也是想以后的生活，自己忙碌了一天后回到家，有心爱的人等着你一起吃饭，想一想是多么的温馨，那样的生活才是幸福的）。答辩完后，和他一起搬的家，看了看他未来的生活的家，也是醉了~。就这样大学里最好的基友，开始了他的自己生活。</span></div><br><div style="font-size: 14px;"><span style="padding-left: 30px;">当他工作后跟我说要出差，我很支持，因为我知道他还不太成熟，自己单独的能力欠缺，性子还比较急，所有的这些，出差回好好地额磨练他的，他找了女朋友，开始了自己的感情生活，我很是高兴的。希望他在云南好好磨练，变得成熟起来，变得独立起来，当出现问题时要自己硬着头皮顶上去，理性的处理各种问题，感性的对待生活。啥也不说了，总之好基友，一辈子！</span><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;padding-left: 30px;&quot;&gt;想了很长时间，就是想不出这个标题来，就叫这个吧。跟好基友说好的，一定专门为你写个传记，正好今天有时间了，也想写点东西了，就给你写个类似传记的东西。我的好
      
    
    </summary>
    
      <category term="Note" scheme="http://longlongblog.cn/categories/Note/"/>
    
    
      <category term="生活" scheme="http://longlongblog.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="感悟" scheme="http://longlongblog.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>每逢佳节倍思亲</title>
    <link href="http://longlongblog.cn/2014/09/08/29/"/>
    <id>http://longlongblog.cn/2014/09/08/29/</id>
    <published>2014-09-08T09:09:18.000Z</published>
    <updated>2016-05-31T05:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<div style="font-size: 14px;"><span style="padding-left: 30px;">每逢佳节倍思亲，月圆之夜你是否会想起家的温暖？独自漂泊在北京，在忙忙人海中，似乎迷失了自己。就是这样，也要去奋斗，去学习，为了自己的事业，还是要拼搏。</span></div><br><div style="font-size: 14px;"><span style="padding-left: 30px;">中秋三天假期，玩的也算是不亦乐乎。第一天，和同事们一起去的是颐和园，体验了一下当年慈禧太后的家，感受了一下昆明湖的魅力，走在大桥上，看到雷峰塔，感叹古代人真会享受，也会审美。第二天和大学同学，早早地去参加基督教堂，参加了那里的教会，听说在里边能净化心灵，让你在繁忙的工作中静下心来，让自己好好休息一下，可是我在那，难受死了，因为我不相信，我试着去净化心灵，但是我还是睡着了。下午去玩了在大学一直没机会去的真人CS，体验了一把CS的魅力，作为队长，带领我们的战队，在最后取得胜利，累的虚脱，但是高兴快乐着。晚上烧烤自助，你无法想象。第三天，在宿舍洗刷一上午，下午LOL几局，让自己身体休息一下，看到北京的蓝天，一切都好了。三天的假期，有朋友的存在，你不会感到孤单，有游戏的存在，你可以尽情的享受。</span></div><br><div style="font-size: 14px;"><span style="padding-left: 30px;">休息结束后又要启程，继续奋斗，珍惜在北京的日子，你会学到很多，过好自己的生活，对于关心你的人就是最大的回报。</span></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;padding-left: 30px;&quot;&gt;每逢佳节倍思亲，月圆之夜你是否会想起家的温暖？独自漂泊在北京，在忙忙人海中，似乎迷失了自己。就是这样，也要去奋斗，去学习，为了自己的事业，还是要拼搏。&lt;
      
    
    </summary>
    
      <category term="Note" scheme="http://longlongblog.cn/categories/Note/"/>
    
    
      <category term="生活" scheme="http://longlongblog.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>那些年，我们一起追过的女孩</title>
    <link href="http://longlongblog.cn/2014/08/17/40/"/>
    <id>http://longlongblog.cn/2014/08/17/40/</id>
    <published>2014-08-17T09:39:19.000Z</published>
    <updated>2016-05-31T05:56:34.000Z</updated>
    
    <content type="html"><![CDATA[<div style="font-size: 14px;"><span style="padding-left: 30px;">还记得那是大学时候的电影，宿舍的哥们说是要看看这个电影，说是电影和我的过去很相似，那时的我淡淡一笑，答应一定要去看看，但是一放下就没有再去看这个电影。</span></div><br><div style="font-size: 14px;"><span style="padding-left: 30px;">今天，上班了，休息的时候，无所事事，想起来了看看这个电影。电影的情节不时让我心中一震，太多的相似，我不得不承认我那时真的是懵懂，只是语言的巨人，行动的矮子，太多的不了解，太多的不懂，电影的情节，让我明白了一些，让我为之颤抖。真正喜欢一个人时，就是当她成为了别人的新娘时，是发自内心真心的祝福。爱情最美好的时候就是你在追女孩时候的懵懂，没有任何的物质掺杂。看完电影后，总觉得自己要写点什么，可是写着写着，就没有了话语，就像有些人聊着聊着就没有了主题，只有寒暄的问候。哎，写到这吧，就是想表达一下今天下午的心情。</span></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;padding-left: 30px;&quot;&gt;还记得那是大学时候的电影，宿舍的哥们说是要看看这个电影，说是电影和我的过去很相似，那时的我淡淡一笑，答应一定要去看看，但是一放下就没有再去看这个电影。&lt;
      
    
    </summary>
    
      <category term="Note" scheme="http://longlongblog.cn/categories/Note/"/>
    
    
      <category term="生活" scheme="http://longlongblog.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>神秘的EJB</title>
    <link href="http://longlongblog.cn/2014/08/05/34/"/>
    <id>http://longlongblog.cn/2014/08/05/34/</id>
    <published>2014-08-05T04:44:50.000Z</published>
    <updated>2016-05-31T05:55:44.000Z</updated>
    
    <content type="html"><![CDATA[<div style="font-size: 14px;"><span style="padding-left: 30px;">EJB 是运行在独立服务器上的组件，客户端是通过网络对EJB 对象进行调用的。在Java中，能够实现远程对象调用的技术是RMI，而EJB 技术基础正是RMI。通过RMI 技术，J2EE将EJB 组件创建为远程对象，客户端就可以通过网络调用EJB 对象了。</span></div><br><div style="font-size: 14px;"><span style="padding-left: 30px;">a.EJB实现原理： 就是把原来放到客户端实现的代码放到服务器端，并依靠RMI进行通信。</span></div><br><div style="font-size: 14px;"><span style="padding-left: 30px;">b.RMI实现原理 ：就是通过Java对象可序列化机制实现分布计算。</span></div><br><div style="font-size: 14px;"><span style="padding-left: 30px;">c.服务器集群： 就是通过RMI的通信，连接不同功能模块的服务器，以实现一个完整的功能。</span></div><div style="font-size: 14px;"><span style="padding-left: 30px;">参考博客：<a href="http://blog.csdn.net/jojo52013145/article/details/5783677" title="EJB到底是什么" target="_blank" rel="external">http://blog.csdn.net/jojo52013145/article/details/5783677</a></span></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;padding-left: 30px;&quot;&gt;EJB 是运行在独立服务器上的组件，客户端是通过网络对EJB 对象进行调用的。在Java中，能够实现远程对象调用的技术是RMI，而EJB 技术基础正是R
      
    
    </summary>
    
      <category term="Java" scheme="http://longlongblog.cn/categories/Java/"/>
    
    
      <category term="学习" scheme="http://longlongblog.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>大四生活小记</title>
    <link href="http://longlongblog.cn/2014/04/23/17/"/>
    <id>http://longlongblog.cn/2014/04/23/17/</id>
    <published>2014-04-23T01:15:25.000Z</published>
    <updated>2016-05-30T05:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<div style="font-size: 14px;"><span style="padding-left: 30px;">在时光的隧道里，在青春的幽径中，大四如期而至，毕业提上日程。匆匆地参加培训，又匆匆地赶回学校，为了一张文凭，还得努力一个多月。做做毕业设计，写写毕业论文，会会好友，享受美食，观光旅行，玩玩游戏，不亦乐乎。</span></div><br><div style="font-size: 14px;"><span style="padding-left: 30px;">回到学校，海边烧烤，在禁止烧烤的牌子下，正大光明地烧烤，赤裸裸的挑衅，这就是疯狂。带上相机，美丽郁金香，艳丽引人，留下美丽的瞬间。海边徒步，参观军舰，已知自己将老已。海中海鸥，海边小蟹，尽在相片中，唯美动人。与同班好友，上午英雄联盟，下午打打麻将，晚上敲敲代码，恍惚一天又过去了。闲暇之余，看学弟学妹上课匆忙，才感知青春犹在。打打篮球，跑跑小步，邂逅路人甲。拜访老师，表达谢意，扯扯大学时光。</span></div><br><div style="font-size: 14px;"><span style="padding-left: 30px;">本不该如此浪费青春，怎耐大学即将逝去，为何不抓住大学的尾巴，疯狂一次呢？错过了就是错过了，不会有当初，不会回到从前，因为感觉不再，时间不再。</span></div><br><div style="font-size: 14px;"><span style="padding-left: 30px;">好好把握现在，疯狂毕业季已经来临！</span><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;span style=&quot;padding-left: 30px;&quot;&gt;在时光的隧道里，在青春的幽径中，大四如期而至，毕业提上日程。匆匆地参加培训，又匆匆地赶回学校，为了一张文凭，还得努力一个多月。做做毕业设计，写写毕业论文
      
    
    </summary>
    
      <category term="Note" scheme="http://longlongblog.cn/categories/Note/"/>
    
    
      <category term="生活" scheme="http://longlongblog.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
